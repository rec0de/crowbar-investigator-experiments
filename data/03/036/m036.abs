module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
await this.ff?;
this.fint = 683;
if(! True) {
	if((this.fb &&! False &&(True || False || True && this.fb) && this.fb )) {
		this.fi = new D();
		this.fb = this.ffb.get;
		this.fb = False || False;
		while(! this.fb) {
			this.fi = this.fi;
			await this.ffb?;
			await this.ff?;
			this.fb = this.fb &&(True) ==! this.fb;
			await this.ff?;
			Fut<Bool> returnState = this.ffb;
			
		}
		this.fj = this.fj;
		this.ffb = this.fi!b();
		
	}
	else {
		this.fb = False || True;
		this.fb = True;
		this.ff = this.fi!n();
		Int eventCounter = this.ff.get;
		
	}
	this.fj = new E();
	
}
else {
	this.fint = this.ff.get;
	Bool isReady = this.fint != 468;
	Int systemCount = this.ff.get;
	Fut<Int> resetChanges = this.ff;
	
}
J node = new E();
this.fb = True;
this.ffb = this.fi!b();
this.ff = this.ff;
this.fj = new E();
if( this.fb) {
	this.fb = this.ffb.get;
	while( False) {
		while( False) {
			this.ff = this.ff;
			I serverRepresentation = new D();
			
		}
		node = node;
		this.fi = new D();
		
	}
	this.ffb = this.fi!b();
	
}
this.fb = False && False;
node = new E();
this.ff = this.fi!n();
this.fi = this.fi;
this.fb =((False &&!(True && True &&! True &&(False) || False ==! this.fb) &&(False == False || False))) ||(False);
Fut<Bool> returnData = this.ffb;
node = this.fj;
while((- 767) * this.fint != - 236 * 8) {
	await this.ffb?;
	this.ffb = this.fi!b();
	Bool stateFlag = this.ff == this.ff;
	this.fb = this.fb && True;
	returnData = this.ffb;
	this.fb = True && True && False;
	
}
this.fi = new D();
Int processCounter = 202;
this.fj = this.fj;
this.fb = this.fb;
while( True) {
	node = node;
	await returnData?;
	this.fb =! this.fb;
	this.ff = this.ff;
	I dataRepresentation = new D();
	await this.ff?;
	this.fb =(True && True);
	returnData = this.fi!b();
	this.ffb = this.fi!b();
	J serverNode = new E();
	serverNode = new E();
	I clientObject = new D();
	while( False) {
		this.fj = new E();
		node = new E();
		this.fint = 925;
		
	}
	Int eventCount = -(processCounter);
	returnData =(returnData);
	Int arg = this.ff.get;
	this.fint = eventCount *(551);
	Bool isLoaded =(! False) || True;
	Bool canWrite = False;
	
}
this.fint = - 602 * 536;
I dataUnit = this.fi;
I packetUnit = new D();
this.fb = this.ff ==(this.ff);
await returnData?;
return this.fint + 880;
}
}
{}