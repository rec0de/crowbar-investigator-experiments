module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
if( True && True) {
	this.fi = new D();
	Bool isReady =(False || True ||(this.fb));
	while( this.fint ==(this.fint)) {
		this.fi = this.fi;
		Int listDepth = this.fint;
		
	}
	
}
else {
	this.fint = this.ff.get;
	
}
this.fint = - 343;
I person = this.fi;
person = this.fi;
Bool canWrite = this.ffb.get;
this.ffb = person!b();
this.ffb = person!b();
await(False || True || True) ==! True && canWrite ||(False &&! True) || False;
while( this.fint * this.fint < 728) {
	Int l =(- 948) + - 309;
	Int processAmount = this.fint;
	Int stackCount = 461 * 971 -(- 531 + - l +(443 + this.fint));
	this.fj = new E();
	canWrite = False;
	
}
this.ff = this.ff;
Int res = this.ff.get;
Bool hasReady =! False;
person = new D();
return this.fint;
}
}
{}