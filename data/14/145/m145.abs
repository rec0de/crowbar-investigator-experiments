module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
if( 52 * 462 > this.fint * 666) {
	while( 963 > 59 * this.fint) {
		this.ff = this.ff;
		this.fb = True;
		this.fi = this.fi;
		
	}
	this.ffb = this.fi!b();
	if( this.fb) {
		while((this.fint == 365)) {
			this.fi = new D();
			this.ff = this.fi!n();
			
		}
		this.fj = this.fj;
		this.fint = - 74 + 562;
		
	}
	else {
		this.ff = this.fi!n();
		this.fj = this.fj;
		I packet = this.fi;
		this.fb = this.fb;
		packet = new D();
		this.fb =!(False) || True || this.fb && False;
		
	}
	if(! False &&(False && this.fb )) {
		this.fi = new D();
		Fut<Bool> syncFlag =(this.ffb);
		syncFlag = this.fi!b();
		I packetStruct = this.fi;
		this.ff = packetStruct!n();
		J packetObject = this.fj;
		
	}
	else {
		await this.ffb?;
		this.fint = - this.fint;
		this.ff = this.fi!n();
		Bool restoreOverride = this.fb && True;
		Int listCounter = this.fint;
		this.ff = this.ff;
		Bool restoreToggle = this.ffb.get;
		this.fb = this.fb || False == True;
		listCounter = 951;
		
	}
	this.ffb = this.fi!b();
	while(! False && False) {
		J node = this.fj;
		
	}
	if( this.ff == this.ff) {
		this.fj = new E();
		
	}
	Int systemCount =(this.ff ).get;
	I dataUnit = this.fi;
	Int res = 247;
	
}
else {
	this.ffb = this.fi!b();
	this.ffb = this.fi!b();
	this.fj = new E();
	this.fi = new D();
	this.fint = 520;
	this.ffb = this.fi!b();
	
}
this.fj = new E();
this.fi = new D();
while( True && True || True && False && True) {
	this.fb = True;
	
}
this.ffb = this.fi!b();
this.fi = new D();
this.fj = this.fj;
this.fj = this.fj;
return - 384;
}
}
{}