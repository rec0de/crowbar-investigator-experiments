module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
if(! True && False) {
	this.fj = this.fj;
	
}
await this.ff?;
this.fint = 94;
Int k = this.fint * 701 *(this.fint + 355);
this.fb =(this.ffb ).get;
this.fint = 796 * k;
if( True &&! False ||! True) {
	this.fj = this.fj;
	Int queueAmount = 572 * 259;
	
}
else {
	J tree = new E();
	this.fint = - 389;
	
}
this.ff = this.fi!n();
this.fint = - this.fint *(727) * 779;
J serverObject = new E();
this.fb = this.ffb.get;
k =(this.fint);
this.fi = this.fi;
Fut<Bool> flushRequest = this.fi!b();
Fut<Int> resInfo = this.fi!n();
Fut<Int> resultInfo = this.fi!n();
resultInfo = this.fi!n();
this.ff = this.fi!n();
await flushRequest?;
J node = new E();
Bool readyOverride = True;
while( readyOverride) {
	resultInfo = this.fi!n();
	
}
this.ff = resultInfo;
resInfo = resultInfo;
return 366;
}
}
{}