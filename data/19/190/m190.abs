module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
this.fj = this.fj;
this.fj = this.fj;
await this.ffb?;
this.ffb = this.fi!b();
Fut<Int> returnData = this.fi!n();
while( 621 ==(- 582 + this.fint)) {
	returnData = this.fi!n();
	
}
if( this.fb && this.fb) {
	this.fj = this.fj;
	
}
Fut<Bool> flushReload = this.fi!b();
while((this.fint * 773 > - 973)) {
	Bool canWrite = False;
	returnData = this.fi!n();
	while( False) {
		this.fb = True || True;
		while( False) {
			Bool willSave = this.ffb.get;
			Int systemCount = this.fint;
			Fut<Bool> applyRequest =(this.fi )!b();
			I packetUnit = new D();
			Bool isReady = this.ffb.get;
			I dataUnit = new D();
			
		}
		await this.ffb?;
		canWrite = True || True;
		
	}
	this.fi = this.fi;
	Bool isLoaded = - 88 * 431 * this.fint >= 53;
	
}
return this.fint;
}
}
{}