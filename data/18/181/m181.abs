module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
await this.ff?;
this.fi = this.fi;
this.fi = this.fi;
if(! this.fb) {
	this.fb = False && True == this.fb;
	while( this.fb) {
		this.ffb = this.fi!b();
		this.ffb = this.fi!b();
		
	}
	this.fint = this.fint;
	this.ffb = this.fi!b();
	this.fj = new E();
	
}
this.fint = 576;
this.ffb =(this.ffb);
while( True) {
	this.fj = this.fj;
	Int systemCount = this.fint + this.fint;
	J tree = this.fj;
	while(! False) {
		while( this.fb ||(this.fb)) {
			this.ffb = this.ffb;
			await this.ffb?;
			Int processDepth = this.fint *(118 * 48 + systemCount * systemCount);
			
		}
		this.ff = this.fi!n();
		tree = tree;
		while( True) {
			this.fb =! False;
			
		}
		this.fint = 286 * 296 * 128;
		
	}
	while( True) {
		this.fj =(tree);
		
	}
	tree = this.fj;
	this.fj = this.fj;
	
}
Fut<Bool> resolveData = this.ffb;
if(! True) {
	if( False == True &&(False || True) && True) {
		this.fi = new D();
		resolveData = this.ffb;
		this.ff = this.fi!n();
		Int j = 712 * 742;
		j = j;
		I tree =((this.fi));
		if( True && True) {
			this.fint = - j * this.fint;
			this.fint = j * 464;
			await this.ffb?;
			this.fint = j + - 207;
			J node = new E();
			await this.ff?;
			this.fi = this.fi;
			j = 585;
			this.ffb = tree!b();
			this.ff = this.fi!n();
			await this.ff?;
			resolveData = resolveData;
			this.fb = this.fi == this.fi;
			node = new E();
			
		}
		
	}
	else {
		I serverNode = new D();
		Bool isLoaded = 655 - this.fint > - 970;
		Fut<Int> resetChanges = serverNode!n();
		I clientObject = this.fi;
		if( False) {
			resolveData = this.ffb;
			this.fb = False;
			
		}
		else {
			await resetChanges?;
			this.fb = 407 > 525;
			await resolveData?;
			await this.ffb?;
			Bool stateToggle = True;
			
		}
		serverNode = new D();
		this.fint = 647 + 791;
		
	}
	
}
else {
	this.ff = this.ff;
	
}
this.ff = this.fi!n();
this.ff = this.ff;
while( 346 <=(404 * 318)) {
	if( False) {
		this.fi = this.fi;
		Bool isDone = this.ffb == this.ffb;
		this.ffb = this.fi!b();
		resolveData = this.fi!b();
		
	}
	else {
		Int systemDepth = this.fint - 752 * - this.fint + this.fint;
		Bool readOverride =(resolveData ).get;
		await resolveData?;
		readOverride = True && False;
		this.fi = new D();
		this.ffb = this.fi!b();
		J clientRepresentation = new E();
		while( True) {
			systemDepth = - this.fint;
			
		}
		
	}
	this.fint = - 114;
	this.ffb = this.fi!b();
	this.fi = new D();
	this.fb = this.fb;
	this.fj = this.fj;
	await this.fb;
	Bool canRead = False;
	this.fi = this.fi;
	
}
this.ffb =(this.fi )!b();
return - 906;
}
}
{}