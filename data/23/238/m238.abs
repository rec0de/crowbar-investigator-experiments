module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
this.fj =(this.fj);
Int l = - 60;
Int res = this.ff.get;
this.fint = 675;
this.fint = res;
this.fint = -(this.fint);
this.fb = False;
this.fj = new E();
this.fint = - res;
if((this.fb && True )) {
	this.ff = this.ff;
	Bool isRead = True && this.fb;
	J node = new E();
	
}
else {
	J clientStruct = this.fj;
	clientStruct = new E();
	res = this.ff.get;
	this.ffb = this.ffb;
	res = 271;
	this.fint = this.ff.get;
	
}
Bool processOverride = False || True;
Fut<Bool> resState = this.ffb;
this.fb =(resState ).get;
J message = new E();
message = message;
I serverUnit = new D();
Int stackCounter = this.fint;
this.ff = this.ff;
this.fb = False;
if( True && this.fb) {
	Bool readyEnabled = True && False || processOverride;
	
}
else {
	this.ffb = serverUnit!b();
	resState = serverUnit!b();
	Int stackDepth = 746;
	while( 613 *(938) == 587) {
		this.fi = new D();
		this.fj =(message);
		while((! False)) {
			this.ffb = serverUnit!b();
			await this.ff?;
			
		}
		res = 495;
		this.ffb = this.ffb;
		this.ff = this.ff;
		Int j = 662;
		if( False && True) {
			await False || False || False ||! this.fb;
			await True;
			stackCounter = 721 * j;
			
		}
		
	}
	await this.ff?;
	J clientUnit = message;
	
}
return - this.fint;
}
}
{}