module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
this.fi = new D();
this.fint = this.fint;
this.ff = this.ff;
this.ff = this.fi!n();
this.fi = this.fi;
I ioUnit = new D();
this.fb = this.ffb.get;
this.fj = new E();
this.ff = this.ff;
this.ff = this.fi!n();
ioUnit =(this.fi);
ioUnit = this.fi;
this.fi = new D();
this.fi = new D();
while((True) &&! True) {
	Bool pauseFlag = 512 < 250 * 232 * 655;
	this.fj = new E();
	this.fb = False;
	this.ffb = this.fi!b();
	J clientRepresentation = this.fj;
	Int stackCount = 108 * 206;
	clientRepresentation = new E();
	this.fj = new E();
	if( pauseFlag ==! pauseFlag) {
		if( clientRepresentation == clientRepresentation) {
			await this.ff?;
			stackCount = 386;
			this.fint = 800;
			this.fj = new E();
			await this.ffb?;
			Int processDepth = 147 * 938;
			pauseFlag = 336 >= 65 + - 596;
			
		}
		else {
			Bool isDone = this.ffb.get;
			await this.ff?;
			await this.ffb?;
			Int stackDepth = 909 * 803;
			stackDepth = 231;
			Int listCount = this.ff.get;
			
		}
		
	}
	else {
		Bool willRead = stackCount - stackCount == 422 * - this.fint;
		await this.ff?;
		while(! pauseFlag ==! True) {
			J message = new E();
			await this.ff?;
			clientRepresentation = new E();
			
		}
		if(((this.fb) ||! False ||! False || True && False )) {
			Int stackDepth = 922;
			this.fint = 327;
			this.fint = 251;
			
		}
		else {
			ioUnit = new D();
			Bool hasLoaded = - 923 != 74;
			
		}
		ioUnit = new D();
		pauseFlag =!(this.fb && True || True) && pauseFlag;
		J packetRepresentation = this.fj;
		packetRepresentation = new E();
		clientRepresentation = new E();
		I person = new D();
		this.fi = this.fi;
		this.fi = new D();
		willRead =!((willRead || False) && True) &&! True &&! this.fb;
		this.ff = this.fi!n();
		
	}
	
}
this.ffb = this.ffb;
Bool isReady = True && this.fb;
if( False) {
	this.fj = new E();
	while(! this.fb) {
		while( this.fint * - 612 == this.fint) {
			await this.ffb?;
			
		}
		
	}
	
}
else {
	await this.ff?;
	this.fj = new E();
	J packetStruct = this.fj;
	isReady =! False || isReady;
	Int listCount =(97);
	Bool canRead =! this.fb;
	Bool hasReady =! isReady || False;
	isReady = this.fj == this.fj;
	
}
isReady = False;
return 454 * 203 * - 876 * 417;
}
}
{}