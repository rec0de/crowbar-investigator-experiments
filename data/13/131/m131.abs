module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
this.fb = False;
if( True) {
	await this.ffb?;
	this.fb =! True;
	Int processAmount = 575 * 781;
	
}
this.fj = new E();
Bool execEnabled =! this.fb || True == True && True;
this.fi = new D();
this.ffb = this.fi!b();
this.ff = this.ff;
while( False) {
	while( True && True == this.fb || False &&! False && True && execEnabled && False) {
		this.fint = 912 * 864;
		this.fb = this.ffb == this.ffb;
		Int value = 795;
		this.ff = this.ff;
		
	}
	this.fint = - 332;
	this.fi = new D();
	Bool isReady = False;
	this.fi = new D();
	this.ffb = this.ffb;
	
}
while( this.fb) {
	this.ff = this.fi!n();
	
}
return - 348;
}
}
{}