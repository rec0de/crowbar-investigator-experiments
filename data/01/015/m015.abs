module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
this.fj = new E();
while(! False) {
	if( False) {
		if( True ==! False && this.fb &&((241 * 252 != - 603) &&! True )) {
			Bool configFlag = False;
			await this.ffb?;
			this.fj = this.fj;
			
		}
		else {
			this.fint = this.ff.get;
			
		}
		if( False == True) {
			this.fb = this.fb;
			this.fj = this.fj;
			this.fj = new E();
			this.fb = - 864 == this.fint;
			this.fi = this.fi;
			await this.ffb?;
			
		}
		else {
			await this.ff?;
			
		}
		this.fint = 733;
		await this.ffb?;
		this.ffb =(this.ffb);
		J message = new E();
		while( this.fb) {
			this.ff = this.fi!n();
			
		}
		
	}
	this.fi = new D();
	if(! False &&! this.fb) {
		this.fint = 799 * this.fint;
		this.fint = this.fint;
		Bool isSaveed = this.fb;
		Bool storageOverride = True;
		
	}
	else {
		this.fint = - this.fint;
		this.fint = this.fint;
		Int listAmount = this.ff.get;
		if( this.fi == this.fi) {
			await False || True;
			
		}
		else {
			this.ff = this.fi!n();
			Int arg =(257) * listAmount + - this.fint;
			this.fi =(this.fi);
			Bool canRead = this.fb;
			
		}
		
	}
	if(! True || True) {
		this.fint = this.fint;
		
	}
	else {
		this.fj = new E();
		this.fj = this.fj;
		this.ff = this.fi!n();
		this.ff =(this.fi )!n();
		Int l = 188;
		
	}
	this.ff = this.fi!n();
	this.ff = this.fi!n();
	this.fint = 25 + 883;
	this.fint = 124;
	this.ff = this.ff;
	
}
this.fb = this.ffb.get;
this.ffb = this.ffb;
Bool willExec =(True);
this.fint = this.ff.get;
this.fj = new E();
this.fj = new E();
await this.ff?;
this.fi = new D();
this.ffb = this.ffb;
await True && willExec;
return this.fint;
}
}
{}