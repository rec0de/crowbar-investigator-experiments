module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
Fut<Int> resData = this.ff;
Int value = 722;
while( False && this.fb || False) {
	while( 404 == this.fint + value) {
		while( False &&! False) {
			this.ffb = this.fi!b();
			
		}
		
	}
	Bool willSave =!(this.fi == this.fi);
	
}
while( True) {
	if( this.fb && this.fb) {
		this.fb = this.ffb.get;
		I tree = new D();
		this.fb = False;
		this.fint = 885;
		Int arg = value;
		await False;
		tree = new D();
		I person = new D();
		value = this.ff.get;
		Int queueCounter =(arg) * - value + 938;
		
	}
	this.fb = False;
	this.fb = this.fb;
	Bool isLoaded = this.ffb.get;
	while(! isLoaded) {
		this.fint = - 218;
		while( this.fb) {
			await this.ff?;
			
		}
		this.ffb = this.fi!b();
		
	}
	
}
this.fb = False;
return 336;
}
}
{}