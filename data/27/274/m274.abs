module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
while( this.ff == this.ff) {
	Fut<Bool> resultState =(this.fi )!b();
	if( True) {
		this.ffb = this.fi!b();
		
	}
	Fut<Bool> p = this.fi!b();
	await p?;
	while( True && False) {
		this.fj = new E();
		Fut<Int> returnInfo = this.ff;
		
	}
	
}
Int i = - this.fint * 300;
Int processCount = - 348;
return - this.fint;
}
}
{}