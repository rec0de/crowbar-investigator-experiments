module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
Int processCounter = 237 * 133 - 92;
this.fj = new E();
processCounter = this.ff.get;
Int stackDepth = - processCounter;
processCounter = stackDepth;
this.ff = this.fi!n();
processCounter = 885;
this.fb = True;
if( False &&(! True )) {
	this.fb =! False;
	processCounter = processCounter;
	stackDepth = 143 * - 815;
	J node = this.fj;
	await this.ff?;
	this.fi = new D();
	I person = this.fi;
	
}
return 924 * - processCounter;
}
}
{}