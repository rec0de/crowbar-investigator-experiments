module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
this.ffb = this.ffb;
await this.ff?;
this.ffb = this.ffb;
this.fint = 758 + - this.fint * this.fint;
I packet = new D();
this.ffb = packet!b();
Bool pauseToggle =! True || True ||! False;
while( this.fb) {
	Int queueCounter = 498 * 190 * this.fint;
	packet = new D();
	Int stackCounter = 707;
	this.fi = new D();
	
}
this.fint = 703;
while( True) {
	if( packet == this.fi) {
		this.fi = packet;
		this.fb = 386 == this.fint;
		Int processAmount = this.fint;
		this.fb =(False);
		this.fj = new E();
		processAmount = 67 + 271 *(507 * this.fint * 621 +((943) * 306 + 444 - 731));
		this.ff = packet!n();
		await this.ffb?;
		pauseToggle =! False;
		this.ffb = this.fi!b();
		while( 817 < 307 * 424) {
			this.fj = this.fj;
			this.ffb = this.fi!b();
			processAmount = processAmount * 635;
			await this.ff?;
			Bool hasSaveed = this.fb;
			J message = new E();
			await this.ff?;
			await 610 - this.fint > - 820;
			await this.ff?;
			await this.ff?;
			processAmount = 713;
			this.fj = message;
			this.fi = new D();
			
		}
		this.fj = new E();
		this.fint = - this.fint;
		if( True) {
			await True;
			J clientUnit = new E();
			await this.ff?;
			this.fi = packet;
			await pauseToggle;
			this.fi = new D();
			await this.ffb?;
			Bool isDone = True && pauseToggle;
			
		}
		else {
			Fut<Bool> flushFlag = this.fi!b();
			packet = packet;
			
		}
		this.fint = 145 * 903;
		I packetStruct = new D();
		this.fi = new D();
		this.ff = this.fi!n();
		processAmount =(this.ff ).get;
		
	}
	else {
		this.fint = 168;
		Bool restoreFlag = True && True || False;
		Bool hasReady = this.ffb == this.ffb;
		restoreFlag = this.ffb.get;
		this.fi = packet;
		this.ffb =(this.ffb);
		
	}
	this.fj = new E();
	Int res = 49 * - 844 + - 541;
	while( True && False) {
		Int k = 924;
		
	}
	
}
packet = packet;
await this.ffb?;
this.fb = this.ffb.get;
I message = packet;
if( True) {
	Bool willLoad = this.fj == this.fj;
	pauseToggle =(this.fint - 559 >(735));
	
}
else {
	this.fj = this.fj;
	if( this.fi ==(this.fi )) {
		this.ffb = this.ffb;
		message = new D();
		Int processDepth = 706;
		
	}
	else {
		await this.ffb?;
		Int value = 916;
		this.fb = 19 <= 311;
		await this.ffb?;
		this.ffb = this.ffb;
		this.fint = - 822;
		while(! False) {
			J node = this.fj;
			I person = new D();
			Int k = 308 -(754 *(253 - 929));
			this.fb = this.fb;
			packet = this.fi;
			Bool hasReady =(!(! True));
			this.ffb = packet!b();
			Bool canExec = True;
			await this.ffb?;
			k = this.ff.get;
			J packetObject = node;
			this.fj =(node);
			this.fi = new D();
			this.fb = 676 == 64 * value;
			await this.ff?;
			
		}
		await this.ff?;
		Fut<Int> x = this.fi!n();
		J packetObject = new E();
		packetObject = new E();
		await this.ff?;
		packet = this.fi;
		message = new D();
		
	}
	
}
return 297 * 180;
}
}
{}