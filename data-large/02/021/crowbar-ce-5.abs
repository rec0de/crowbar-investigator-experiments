module Counterexample;
interface Ce { Unit ce(); }

class CeFrame implements Ce {
	Int fint = 0;
	Bool fb = False;
	String fj = null;
	String ff = "fut_?(0)";
	String fi = null;

	Unit ce() {
		// Snippet from: unknown
		// while((-7 == (this.fint + this.fint))){} 
		// Known true:
		// Negated loop guard: !((-7 == (this.fint + this.fint)))
		// Loop invariant: true
		
		// Assume the following pre-state:
		String packetRepresentation = null;
		this.fint = 1;
		this.fb = True;
		// End of setup
		
		String packetStruct = packet;
		Int queueDepth = (835 + this.fint);
		// J clientObject = new E();
		String clientObject = "object_1";
		if(this.fb){
			Int value = -868;
		}
		this.fj = clientObject;
		packetStruct = this.fj;
		// packetStruct = new E();
		packetStruct = "object_2";
		}
		// this.ff = this.fi!n();
		this.ff = "fut_43";
		Int processCounter = -this.fint;
		// processCounter = (this.ff).get;
		// Future value irrelevant or unavailable, using default:
		processCounter = 0;
		
		// Proof failed here. Trying to show:
		// Null-check: !(packetRepresentation=0)
		// Failed to show the following sub-obligations:
		// !(packetRepresentation=0)
	}
}

{
	Ce x = new CeFrame();
	x.ce();
}
