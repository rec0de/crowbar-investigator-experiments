module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
this.fj = new E();
this.ff = this.ff;
Fut<Int> x = this.fi!n();
Int l = 314 * - 445 * 469;
this.fj = this.fj;
this.fi =(this.fi);
this.fint = x.get;
Int res = 406 + 955;
this.fint = this.ff.get;
this.fi = new D();
this.ff = x;
this.fi = this.fi;
x = x;
this.fi = new D();
this.fi = new D();
J ioObject =(this.fj);
this.fi = this.fi;
this.ffb = this.fi!b();
while( this.fb || this.fb && this.fb) {
	this.fint = this.fint;
	while( True || this.fb && False) {
		if( False) {
			ioObject = new E();
			Fut<Bool> resInfo =(this.fi )!b();
			J message = ioObject;
			l = x.get;
			message = new E();
			Fut<Bool> applyRequest = this.fi!b();
			this.ffb = this.fi!b();
			
		}
		else {
			this.ffb = this.fi!b();
			this.fint = this.ff.get;
			Int i = - 288;
			await this.ffb?;
			this.ffb = this.ffb;
			this.fint = 650 + res;
			Int stackCounter = x.get;
			i = 755;
			this.ffb = this.ffb;
			
		}
		while( True) {
			x = this.ff;
			await this.ff?;
			x = this.fi!n();
			res = 279;
			await x?;
			Int k = x.get;
			k = l - 25;
			await this.ff?;
			k = - 61;
			this.fb = True;
			
		}
		ioObject = new E();
		
	}
	if((this.fb )) {
		this.fj = new E();
		this.fint = 142 *(430) - 30;
		this.fb = this.fb &&! this.fb;
		x = this.fi!n();
		this.fj = ioObject;
		I message = new D();
		
	}
	else {
		await x?;
		this.fb = True &&! False || True;
		this.ff = this.fi!n();
		l = 329;
		Int processCount = 250;
		l = 545;
		this.ff = x;
		
	}
	if( False || False) {
		while( this.fb) {
			Int stackCount = 846;
			Int arg = - 542;
			
		}
		J serverUnit = new E();
		this.fint = 824;
		Bool processToggle = this.fb || False && False;
		if(! False &&! processToggle && True) {
			await(this.fb && processToggle);
			
		}
		else {
			Fut<Bool> p = this.fi!b();
			
		}
		this.fj = new E();
		
	}
	else {
		Int j = 217;
		
	}
	Bool isDone = l != 749;
	this.fi = this.fi;
	while( True ||! True) {
		if( False || True) {
			this.fj =(ioObject);
			Fut<Bool> resultData = this.fi!b();
			
		}
		await x?;
		res = l;
		if( True &&(isDone || True )) {
			await this.ff?;
			
		}
		else {
			x = this.fi!n();
			
		}
		
	}
	isDone = True || False;
	
}
Int queueAmount = x.get;
this.fi = new D();
x =(this.fi )!n();
this.ff = this.ff;
this.fb = False;
this.fj = ioObject;
this.ffb = this.ffb;
this.ff = this.fi!n();
Int processCount = 104;
this.fj = this.fj;
this.fj = ioObject;
while(!(568 <= res * -(- 673) +(510) * 713 * 246) || False ||! this.fb) {
	ioObject = new E();
	
}
Bool isLoad = False ||! this.fb;
x =(this.ff);
res =(195);
if( this.fb) {
	J clientStruct = new E();
	isLoad =! isLoad ||(! False && this.fb) && isLoad;
	Bool isLoaded = - 151 >= queueAmount;
	queueAmount = 398 + 334;
	queueAmount = this.fint;
	
}
else {
	this.ff =(this.fi )!n();
	processCount =(l);
	
}
this.fi = new D();
while( 545 >= 425 * 199 * 232) {
	isLoad = this.fb && True;
	J dataRepresentation = ioObject;
	isLoad = False && False;
	this.ffb = this.ffb;
	
}
return 254 * 844 - 442;
}
}
{}