module Counterexample;
interface Ce { Unit ce(); }

class CeFrame implements Ce {
	Int fint = 0;
	String ff = "fut_?(0)";
	String fi = null;

	Unit ce() {
		// Snippet from: unknown
		// while((((True && False) && True) && False)){} 
		// Known true:
		// Negated loop guard: !((((True && False) && True) && False))
		// Loop invariant: true
		
		
		
		// await this.ffb?;
		// No heap modification info available at this point
		
		// I packetStruct = new D();
		String packetStruct = "object_1";
		Int systemDepth = 389360;
		// Fut applyRequest = packetStruct!n();
		String applyRequest = "fut_26";
		this.fint = -105;
		packetStruct = packetStruct;
		if(False){}
		else{
			systemDepth = 224;
			// systemDepth = (this.ff).get;
			// Future value irrelevant or unavailable, using default:
			systemDepth = 0;
			// J packetObject = new E();
			String packetObject = "object_2";
			Bool execEnabled = False;
			Int eventDepth = (this.fint - systemDepth);
		}
		// J packetNode = new E();
		String packetNode = "object_3";
		// Int value = (this.ff).get;
		// Future value irrelevant or unavailable, using default:
		Int value = 0;
		// this.fi = new D();
		this.fi = "object_4";
		value = 538;
		String message = packetNode;
		println(toString(735)); // return statement
		// Evaluates to: 735
		// Proof failed here. Trying to show:
		// Method postcondition: (result=0)
		// Object invariant: true
		// Failed to show the following sub-obligations:
		// (735=0)
	}
}

{
	Ce x = new CeFrame();
	x.ce();
}
