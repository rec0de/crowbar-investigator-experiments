module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
J packetNode = this.fj;
Bool processFlag = True || True && True;
if( this.fb &&!(True) || True) {
	Fut<Bool> resetChanges = this.fi!b();
	Int j = - 936 * this.fint * 480;
	
}
else {
	Bool hasLoaded = 627 < 700 * - 104;
	
}
processFlag = True == True;
this.fint = this.fint;
packetNode = this.fj;
this.fj = new E();
processFlag = this.fb;
Int processAmount = - 642;
J node = new E();
await this.fint + 746 > 820;
this.fi = new D();
this.fint = processAmount;
this.ffb = this.fi!b();
await this.ffb?;
while( False) {
	Bool restoreFlag = this.ffb.get;
	
}
this.ffb = this.fi!b();
await this.ff?;
if( 316 -(619) * 402 < processAmount) {
	Bool processEnabled = True;
	while(!(this.fb) || True) {
		this.ffb = this.fi!b();
		if( True) {
			await this.ffb?;
			Bool systemFlag =! False;
			
		}
		this.ff =(this.fi )!n();
		Bool hasLoaded = True;
		this.fint = 694;
		this.fi = new D();
		
	}
	Bool willWrite = True;
	this.fb = processEnabled;
	this.ffb = this.ffb;
	if( node ==(packetNode )) {
		I packet =(this.fi);
		processFlag = True;
		this.fint =(245);
		willWrite = True;
		
	}
	else {
		processEnabled = False || processFlag;
		processAmount = 505;
		this.fint = this.fint;
		
	}
	willWrite = node == node;
	
}
this.ffb = this.fi!b();
J packet = this.fj;
processFlag = True;
processFlag = this.fb;
await True;
packet = this.fj;
this.fb = True;
I dataObject = this.fi;
this.fb =! True;
if( True) {
	packetNode = new E();
	Int value = 985;
	
}
processAmount = - 40 * 371;
if(! False) {
	Int processDepth = 106;
	node = packet;
	
}
else {
	Int j = 560;
	this.fj = new E();
	dataObject = dataObject;
	
}
processFlag = processAmount + - 275 == processAmount * 243;
node = node;
this.ff = this.ff;
this.fi = new D();
processFlag = False;
this.fi =((dataObject));
processAmount = 476;
if(!(500 == 541) || False) {
	if(!(this.fint > -(- 215) + processAmount )) {
		this.ff = this.ff;
		packetNode = new E();
		this.fint = 539;
		J serverRepresentation = packet;
		
	}
	else {
		Int res = this.fint;
		Bool willLoad = this.fb;
		while( this.fb) {
			willLoad = this.ffb.get;
			
		}
		
	}
	Bool canLoad = this.ffb.get;
	
}
else {
	while( False) {
		J serverObject = packetNode;
		serverObject = this.fj;
		Int value = - 361;
		while( 974 - 109 == value + 145) {
			packetNode = new E();
			packetNode = new E();
			I tree = dataObject;
			
		}
		this.ff = dataObject!n();
		Bool restoreToggle = this.ff == this.ff;
		
	}
	processAmount = 169;
	
}
Bool hasSaveed = processAmount <= processAmount * this.fint * - 63;
this.fj = new E();
J tree = this.fj;
Fut<Bool> syncState = this.ffb;
processFlag = False || processFlag ||((! False));
this.ff = dataObject!n();
this.fb = False;
this.ff = this.fi!n();
this.fint = this.fint;
hasSaveed = True;
dataObject = this.fi;
packetNode = tree;
packetNode = node;
return 351;
}
}
{}