module Counterexample;
interface Ce { Unit ce(); }

class CeFrame implements Ce {
	Int fint = 0;
	String fi = null;
	Bool fb = False;
	String ff = "fut_?(0)";
	String ffb = "fut_?(0)";

	Unit ce() {
		// Snippet from: unknown
		// while(this.fb){} 
		// Known true:
		// Negated loop guard: !(this.fb)
		// Loop invariant: true
		
		// Assume the following pre-state:
		this.fint = 7;
		this.fi = "object_?(7)";
		this.fb = True;
		this.ff = "fut_?(7)";
		// End of setup
		
		this.fb = (True && this.fb);
		// this.ff = this.fi!n();
		this.ff = "fut_32";
		// J person = new E();
		String person = "object_1";
		// this.fint = (this.ff).get;
		this.fint = 10;
		Int processCounter = (this.fint * this.fint);
		
		// await this.ffb?;
		// Assume the following assignments while blocked:
		this.fint = 11;
		this.fi = null;
		this.fb = True;
		this.ff = "fut_?(11)";
		// End assignments
		
		processCounter = processCounter;
		String dataObject = this.fi;
		// this.ffb = dataObject!b();
		this.ffb = "fut_33";
		
		// await this.ffb?;
		// No heap modification info available at this point
		
		this.fb = (-449 > 812);
		
		// Proof failed here. Trying to show:
		// Null-check: !(dataObject=0)
		// Failed to show the following sub-obligations:
		// !(select(anon(store(store(store(heap, this.fb, (1&&heap.fb)), this.ff, fut_32), this.fint, valueOf(select(store(heap, this.ff, fut_32), this.ff)))), this.fi)=0)
	}
}

{
	Ce x = new CeFrame();
	x.ce();
}
