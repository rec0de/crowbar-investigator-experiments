module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
this.ffb = this.ffb;
this.fj = new E();
if( True) {
	Int arg = this.fint;
	this.ff = this.ff;
	
}
else {
	await False;
	this.fi =(this.fi);
	while( True) {
		Int arg = this.fint - this.fint;
		
	}
	this.fb = True && this.fb;
	if( - this.fint <= 419) {
		this.fb = False || True;
		await this.ff?;
		
	}
	else {
		this.fb = this.fb;
		while( this.fb) {
			this.ffb = this.fi!b();
			
		}
		this.fj = new E();
		this.ffb = this.ffb;
		this.fb =(this.ff) == this.ff;
		
	}
	
}
while( this.fb) {
	this.fb = this.fint < 409;
	
}
this.ff = this.fi!n();
Bool hasReady = this.fb;
Int eventDepth = 582;
this.ff = this.fi!n();
await this.ffb?;
while( False) {
	hasReady =! False;
	this.ffb = this.fi!b();
	
}
eventDepth = 805;
while( hasReady) {
	hasReady = True;
	
}
J packet = new E();
this.fint = 500;
hasReady = this.fb || False;
I person = this.fi;
this.fj = this.fj;
packet = this.fj;
if( 208 == - 399 - 710) {
	eventDepth =(- 260);
	eventDepth = - 397 + 906;
	J ioNode = this.fj;
	this.ff = this.fi!n();
	
}
else {
	hasReady = hasReady;
	while( False) {
		if( this.fb) {
			Int i = 537;
			Bool restoreFlag = 850 * 925 +(703 * 506 * 665) > i;
			Bool isExec = False;
			Int value = 656;
			await this.ffb?;
			Bool execEnabled = this.ffb.get;
			value =(248 - value);
			await this.ff?;
			packet = new E();
			this.fint = - 519;
			await False && True;
			I ioRepresentation = person;
			
		}
		await this.ff?;
		while( this.fb) {
			this.fi = this.fi;
			I tree = person;
			eventDepth = 516 * 187;
			this.fint =(- eventDepth) * eventDepth;
			await this.ffb?;
			
		}
		J packetRepresentation = new E();
		this.fint = - 182;
		await this.ff?;
		this.ffb = person!b();
		this.ffb = person!b();
		this.fi = new D();
		while(! True ||! True) {
			this.fi = this.fi;
			
		}
		this.ffb = person!b();
		eventDepth = - 218;
		
	}
	Fut<Bool> y = this.ffb;
	
}
eventDepth = 662;
eventDepth = 920 - 736;
I tree = new D();
if(! False) {
	Int listDepth = 820;
	this.fi = new D();
	packet =(packet);
	while(! this.fb || True) {
		this.ffb = this.fi!b();
		
	}
	Bool restoreToggle = False && False;
	
}
else {
	I message = person;
	hasReady = False;
	this.fj = new E();
	this.ffb =(this.ffb);
	this.ff = this.fi!n();
	tree = new D();
	this.fint = this.fint * - eventDepth - - 493;
	tree = new D();
	
}
while(! False || this.fb ||! hasReady) {
	J node = packet;
	eventDepth = 581;
	this.fj = packet;
	
}
if( this.fb) {
	Fut<Bool> resetReload = this.fi!b();
	person = new D();
	person = new D();
	
}
else {
	while( False || False) {
		this.fint = - 110;
		eventDepth = 169 * eventDepth;
		
	}
	this.ffb = this.ffb;
	hasReady = True;
	hasReady = True;
	
}
J ioRepresentation = this.fj;
Bool storageOverride = 178 >= eventDepth;
tree = new D();
ioRepresentation = this.fj;
return 532;
}
}
{}