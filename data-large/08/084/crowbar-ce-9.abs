module Counterexample;
interface Ce { Unit ce(); }

class CeFrame implements Ce {
	String fj = null;
	String ff = "fut_?(0)";
	String fi = null;
	Int fint = 0;
	Bool fb = False;
	String ffb = "fut_?(0)";

	Unit ce() {
		// Snippet from: unknown
		// Assume the following pre-state:
		this.fj = "object_?(8)";
		this.ff = "fut_?(9)";
		this.fi = "object_?(8)";
		this.fint = 8;
		this.fb = True;
		this.ffb = "fut_?(8)";
		// End of setup
		
		// Known true:
		// Loop guard: True
		// Loop invariant: true
		// while(True) {
		{
			// Int k = (this.ff).get;
			Int k = 775;
			Int processCounter = k;
			this.fj = this.fj;
			Bool isSaveed = False;
			// this.fi = new D();
			this.fi = "object_1";
			Bool isRead = (774 >= processCounter);
			if(!isRead){
				this.fint = this.fint;
				
				// await y?;
				// Assume the following assignments while blocked:
				this.fj = "object_?(10)";
				this.ff = "fut_?(10)";
				this.fi = "object_?(10)";
				this.fint = 10;
				this.fb = True;
				this.ffb = "fut_?(10)";
				// End assignments
				
				isSaveed = False;
				isRead = (False || True);
				if(True){
					this.fb = False;
					isRead = (True || True);
					k = 660;
					
					// await this.ffb?;
					// Assume the following assignments while blocked:
					this.fj = "object_?(11)";
					this.ff = "fut_?(11)";
					this.fi = null;
					this.fint = 11;
					this.fb = True;
					this.ffb = "fut_?(11)";
					// End assignments
					
				}
				Int i = (625 - (k * 679));
				String person = this.fi;
				Bool hasReady = isRead;
				String message = this.fi;
				person = message;
				// this.ffb = message!b();
				this.ffb = "fut_67";
				// message = new D();
				message = "object_2";
				Int stackCounter = -698;
			}
			// J clientUnit = new E();
			String clientUnit = "object_3";
			this.fint = 66;
			if((isSaveed && False)){}
			else{
		
			}
		
		// Proof failed here. Trying to show:
		// Null-check: !(heap.fi=0)
		// Failed to show the following sub-obligations:
		// !(select(anon(store(anon(store(store(store(store(heap, this.fj, heap.fj), this.fi, NEW2_0), this.fi, NEW2_0), this.fint, heap.fint)), this.fb, 0)), this.fi)=0)
		}
	}
}

{
	Ce x = new CeFrame();
	x.ce();
}
