module MockABS;

data Spec = Ensures(Bool) | Requires(Bool);

// Static base definitions
interface I { Int n(); Bool b(); }
interface J { Unit m(Int v); I getI(Bool flag, Int c); }
class D implements I { Int n() { return 0; } Bool b() { return False; } }
class E implements J { Unit m(Int v) { } I getI(Bool flag, Int c) { I res = new D(); return res; } }

class Generated {
Int fint = 0;
Bool fb = True;
Fut<Int> ff;
Fut<Bool> ffb;
I fi = null;
J fj = null;

[Spec : Ensures(result == 0)]
Int gen() {
this.fi = this.fi;
J clientUnit = new E();
await this.ffb?;
this.fj = clientUnit;
this.fi = this.fi;
I clientObject = new D();
J ioRepresentation = new E();
while( True || this.fb) {
	if( this.fb || False) {
		clientUnit =((ioRepresentation));
		Int systemCounter = 173 * this.fint;
		Int l = 302;
		Int eventAmount = 787 * 674;
		await this.ffb?;
		J serverRepresentation = new E();
		
	}
	
}
while( this.fb) {
	I tree = new D();
	tree = tree;
	
}
await this.ffb?;
while( this.fb) {
	Bool isLoaded = this.ffb.get;
	Bool pauseToggle = - 957 == this.fint;
	this.fint = this.ff.get;
	if( 652 <= - 757) {
		this.fb =(False);
		
	}
	else {
		await this.ffb?;
		Int listAmount = 598;
		this.ffb = clientObject!b();
		Fut<Int> resInfo = clientObject!n();
		
	}
	this.ffb = clientObject!b();
	Int systemCounter = this.ff.get;
	clientObject = new D();
	this.fj = new E();
	pauseToggle = isLoaded;
	I person = this.fi;
	isLoaded = this.ffb.get;
	if(!(False )) {
		this.ff = this.fi!n();
		
	}
	await this.ff?;
	Bool processToggle = isLoaded;
	Int processDepth = systemCounter;
	systemCounter = 629;
	clientObject = new D();
	await this.ffb?;
	
}
this.fint = this.fint * -(46 - 176) * 789;
clientObject = new D();
Int listCounter = 512 * 859;
Bool canLoad = this.ffb.get;
clientUnit = clientUnit;
this.ff = this.fi!n();
clientUnit = ioRepresentation;
Int k = 604;
canLoad =! canLoad;
clientUnit = new E();
if( True) {
	Int queueCount = this.ff.get;
	Bool hasDone = False && False &&! True && True;
	queueCount = 679;
	this.ffb = this.fi!b();
	this.fb =(True);
	while( True) {
		this.fint = k;
		
	}
	J dataNode = ioRepresentation;
	Fut<Bool> returnState = clientObject!b();
	hasDone = this.fb && True;
	this.fi = new D();
	
}
else {
	while( False) {
		I packet = new D();
		
	}
	clientObject = new D();
	clientUnit = new E();
	this.fint = this.ff.get;
	clientUnit = clientUnit;
	k = 756;
	Int res = this.ff.get;
	await this.ff?;
	this.fi = this.fi;
	
}
ioRepresentation = clientUnit;
listCounter = listCounter;
clientUnit = new E();
if( True && False) {
	this.fint =(344);
	
}
else {
	this.ff = this.ff;
	if( 765 == - 246) {
		I message = clientObject;
		I clientStruct = new D();
		listCounter = 672 * 59;
		while( True) {
			Bool processOverride =((this.fb)) && False;
			await this.ffb?;
			ioRepresentation = clientUnit;
			this.ffb =(clientStruct )!b();
			
		}
		k = 857;
		Bool isReady = True;
		clientObject = new D();
		await True && True;
		
	}
	this.fint = k + - 32;
	
}
clientUnit = clientUnit;
return 508;
}
}
{}